ProductController
Get Products - Done.
Add a product - Done.
Get one product - Done.
Filter Product - Done.
Rate product. - Done.
Add items to Cart - Done.
Get items of cart - Done.
Remove items from cart. - Done.

UserController
Signup - Email, Name, Password, TypeOfUser(customer, seller) - Done.
Signin - (Email, Password) - Done.

// getting averagePrice
{
_id: Cat1
averagePrice:5000
} // these two fields are not in our data base so basically we have to create these temperary fields not in database only in result 

// finding average rating of a product but as you know that there is rating attribute and in there attribute there are multipe ratings we are going to access nested layers i meant nested attributes inside an attribute well this would be possible by using unwind

const db = getDB();
await db.collections.(this.collection).aggregate([
    stage 1. // creating documents for rating
    {
        $unwind: {$ratings} // this will take all ratings inside and keep them in the documents set
    },
    stage 2. grouping all documents and getting their average ratings
    {
        $group:{
            _id : "$name",
            averageRating : {$avg:"$ratings.rating"}
        }
    }
])


return await db.collection(this.collection).aggregate([
        {
          // stage 1.project name of product, countOfRating
          $project: { name: 1, countOfRating: { $cond: { if: { $isArray: "$ratings" }, then: { $size: "ratings" }, else: 0 } } }
        },

        {
          // stage 2. sorting the resulted countOfRating
          $sort: { countOfRating: -1 } // sorting in decending order
        },

        {
          // stage 3. limgiting to get only one item in result
          $limit: 1 // sorting in decending order
        }
      
      ])





Folder Structure
Route configuration
Creating APIs
Different API Methods
Middlewares
Route parameters
Query parameters
Testing api using postman
Securing Api using jwt token
Documenting API using using swagger
CORS
Logging
Error Handling